---
output: 
  pdf_document: 
    latex_engine: xelatex
header-includes:
  - \usepackage{amsmath}
  - \usepackage{array}
  - \usepackage{pdfpages}
geometry: margin=1in
---

**Azreen Haque** 

**2/28/2025**

**Solutions**

## Problem 1
Solutions below.


### Part A
```{r}
data <- read.csv("hw04pr01.csv", header = TRUE, sep = ",")
names(data)

# Fit simple linear regression model
model <- lm(Minutes ~ Copiers, data = data)

# summary of the model
summary(model)

# Extract coefficients
b0 <- coef(model)[1]  # Intercept
b1 <- coef(model)[2]  # Slope

# Print fitted equation
cat("Fitted Equation: Y (Minutes) =", round(b0, 2), "+", round(b1, 2), "* X (Copiers)\n")
```

### Part B
```{r}
# Define confidence level
alpha <- 0.10

# Sample size
n <- nrow(data)

# Compute MSE
MSE <- sum(residuals(model)^2) / (n - 2) 

# Compute the mean of X (Copiers)
Xbar <- mean(data$Copiers)

# Compute SXX 
SXX <- sum((data$Copiers - Xbar)^2)

# Compute t critical value for (1 - alpha/2) confidence level
t_critical <- qt(1 - alpha/2, df = n-2)

# Function to calculate confidence interval at given X_h
confidence_interval <- function(X_h) {
  # Compute predicted Y value
  Y_hat <- coef(model)[1] + coef(model)[2] * X_h
  
  # Compute standard error
  SE_Y_hat <- sqrt(MSE * (1/n + ((X_h - Xbar)^2 / SXX)))
  
  # Compute confidence interval bounds
  margin_of_error <- t_critical * SE_Y_hat
  lower_bound <- Y_hat - margin_of_error
  upper_bound <- Y_hat + margin_of_error
  
  return(c(lower_bound, upper_bound))
}

# Calculate confidence intervals for X_h = 2, 4, 6, 8
X_h_values <- c(2, 4, 6, 8)
CI_results <- t(sapply(X_h_values, confidence_interval))

# Results
colnames(CI_results) <- c("Lower Bound", "Upper Bound")
rownames(CI_results) <- paste("X_h =", X_h_values)
print(CI_results)

# Interpretation at X_h = 4
X_selected <- 4
CI_selected <- confidence_interval(X_selected)

cat("We are 90% confident that the true mean service time\n",
    "for servicing", X_selected, "copiers is between\n",
    round(CI_selected[1], 2), "and", round(CI_selected[2], 2), 
    "minutes.\n")
```

### Part C
```{r}
# Define confidence level
alpha <- 0.10  
g <- 4 

# Sample size
n <- nrow(data)

# Compute MSE
MSE <- sum(residuals(model)^2) / (n - 2)

# Compute the mean of X (Copiers)
Xbar <- mean(data$Copiers)

# Compute SXX 
SXX <- sum((data$Copiers - Xbar)^2)

# Compute t critical value for Bonferroni correction
t_critical_bonf <- qt(1 - alpha / (2 * g), df = n - 2)

# Function to calculate Bonferroni confidence interval at given X_h
bonf_confidence_interval <- function(X_h) {
  # Compute predicted Y value
  Y_hat <- coef(model)[1] + coef(model)[2] * X_h
  
  # Compute standard error
  SE_Y_hat <- sqrt(MSE * (1/n + ((X_h - Xbar)^2 / SXX)))
  
  # Compute confidence interval bounds
  margin_of_error <- t_critical_bonf * SE_Y_hat
  lower_bound <- Y_hat - margin_of_error
  upper_bound <- Y_hat + margin_of_error
  
  return(c(lower_bound, upper_bound))
}

# Calculate joint confidence intervals for X_h = 2, 4, 6, 8
X_h_values <- c(2, 4, 6, 8)
Bonf_CI_results <- t(sapply(X_h_values, bonf_confidence_interval))

# Results
colnames(Bonf_CI_results) <- c("Lower Bound", "Upper Bound")
rownames(Bonf_CI_results) <- paste("X_h =", X_h_values)
print(Bonf_CI_results)
```

### Part D
```{r}
# Define confidence level
alpha <- 0.10  # 90% confidence level

# Sample size
n <- nrow(data)

# Compute MSE
MSE <- sum(residuals(model)^2) / (n - 2)

# Compute the mean of X (Copiers)
Xbar <- mean(data$Copiers)

# Compute SXX
SXX <- sum((data$Copiers - Xbar)^2)

# Compute F critical value for Working-Hotelling procedure
F_critical_wh <- qf(1 - alpha, df1 = 2, df2 = n-2)

# Function to calculate Working-Hotelling confidence interval at given X_h
wh_confidence_interval <- function(X_h) {
  # Compute predicted Y value
  Y_hat <- coef(model)[1] + coef(model)[2] * X_h
  
  # Compute standard error
  SE_Y_hat <- sqrt(MSE * (1/n + ((X_h - Xbar)^2 / SXX)))
  
  # Compute confidence interval bounds
  margin_of_error <- sqrt(2 * F_critical_wh) * SE_Y_hat
  lower_bound <- Y_hat - margin_of_error
  upper_bound <- Y_hat + margin_of_error
  
  return(c(lower_bound, upper_bound))
}

# Calculate joint confidence intervals for X_h = 2, 4, 6, 8
WH_CI_results <- t(sapply(X_h_values, wh_confidence_interval))

# Display results
colnames(WH_CI_results) <- c("Lower Bound", "Upper Bound")
rownames(WH_CI_results) <- paste("X_h =", X_h_values)
print(WH_CI_results)
```

### Part E
```{r}
# Define the confidence intervals from Parts (b), (c), and (d)
CI_b <- matrix(c(26.11796, 32.86272, 
                 57.15175, 61.96992, 
                 87.28387, 91.97880, 
                 116.46245, 122.94121), 
               ncol = 2, byrow = TRUE)

CI_c <- matrix(c(24.83096, 34.14972, 
                 56.23236, 62.88931, 
                 86.38800, 92.87466, 
                 115.22620, 124.17745), 
               ncol = 2, byrow = TRUE)

CI_d <- matrix(c(25.06746, 33.91321, 
                 56.40131, 62.72036, 
                 86.55263, 92.71003, 
                 115.45338, 123.95028), 
               ncol = 2, byrow = TRUE)

# Compute Confidence Interval Widths
width_b <- CI_b[,2] - CI_b[,1]  # Part (b)
width_c <- CI_c[,2] - CI_c[,1]  # Part (c)
width_d <- CI_d[,2] - CI_d[,1]  # Part (d)

# Create a dataframe to display the widths
X_h_values <- c(2, 4, 6, 8)
CI_widths <- data.frame(
  X_h = X_h_values,
  Width_b = width_b,
  Width_c = width_c,
  Width_d = width_d
)

# Print results
print(CI_widths)

# Comparison
cat("Bonferroni (Part c) produces the widest confidence intervals at every X_h.
    Individual CIs (Part b) are the narrowest and Working-Hotelling (Part d) produces 
    slightly narrower intervals than Bonferroni.")
```

### Part F
```{r}
# Fit a linear regression through the origin (no intercept)
model_origin <- lm(Minutes ~ 0 + Copiers, data = data)

# Display model summary
summary(model_origin)

# Extract the coefficient (slope)
b1_origin <- coef(model_origin)[1]

# Print fitted equation
cat("Fitted Equation: Y (Minutes) =", round(b1_origin, 2), "* X (Copiers)\n")
```


### Part G
```{r}
# Get predicted values
Y_pred_origin <- predict(model_origin)

# Compute residuals
residuals_origin <- data$Minutes - Y_pred_origin

# Check if residuals sum to zero
residuals_sum <- sum(residuals_origin)

# Print sum of residuals
cat("Sum of residuals:", residuals_sum, "does not equal 0")
```

## Problem 2

### Part A
```{r}
# Load library
library(ggplot2)

# Load dataset
data <- read.csv("hw04pr02.csv")

head(data)

# Fit a regular linear regression model (with intercept)
model <- lm(GPA ~ ACT, data = data)

# Display model summary
summary(model)

# Extract coefficients
b0 <- coef(model)[1]  # Intercept
b1 <- coef(model)[2]  # Slope

# Print estimated regression function
cat("Estimated Regression Function: Y =", round(b0, 2), "+", round(b1, 2), "* X (ACT Score)\n")


```


### Part B
```{r}
# Fit linear regression through the origin (no intercept)
model_origin <- lm(GPA ~ 0 + ACT, data = data)

# Display model summary
summary(model_origin)

# Extract slope coefficient (no intercept)
b1_origin <- coef(model_origin)[1]

# Print estimated regression function
cat("Estimated Regression Function (Through Origin): Y =", round(b1_origin, 2), "* X (ACT Score)\n")
```


### Part C
```{r}
# Create scatterplot with both regression lines
ggplot(data, aes(x = ACT, y = GPA)) +
  geom_point(color = "black", alpha = 0.6) +  # Scatterplot points
  geom_abline(
    intercept = b0, slope = b1, 
    color = "green", linewidth = 1, linetype = "solid"
  ) +  # Regular regression
  geom_abline(
    intercept = 0, slope = b1_origin, 
    color = "red", linewidth = 1, linetype = "dashed"
  ) +  # Regression through origin
  labs(
    title = "GPA vs. ACT Score with Both Regression Models",
    x = "ACT Score",
    y = "GPA"
  ) +
  theme_minimal() +
  annotate("text", x = 20, y = 3.5, label = "Regular Regression", color = "green") +
  annotate("text", x = 20, y = 3.0, label = "Through-Origin Regression", color = "red")
```

### Part D
```{r}
# Compute residuals for regular regression
residuals_reg <- residuals(model)
sum_residuals_reg <- sum(residuals_reg)

# Compute residuals for regression through origin
residuals_origin <- residuals(model_origin)
sum_residuals_origin <- sum(residuals_origin)

# Print sum of residuals
cat("Sum of residuals (Regular Regression):", sum_residuals_reg, "\n")
cat("Sum of residuals (Through-Origin Regression):", sum_residuals_origin, "\n")

# Explanation of the difference
if (sum_residuals_reg == 0) {
  cat("- The sum of residuals for the regular regression is exactly zero\n")
  cat("  because the model includes an intercept.\n")
  cat("- According to the least squares property, this ensures residuals\n")
  cat("  are symmetrically distributed around zero.\n\n")
}

if (sum_residuals_origin != 0) {
  cat("- The sum of residuals for the through-origin regression is not zero\n")
  cat("  because this model does not include an intercept.\n")
  cat("- Based on Chapter 2, when an intercept is missing, the model\n")
  cat("  cannot correct for shifts in the data, potentially causing\n")
  cat("  systematic bias.\n\n")
}
```


## Problem 3
### Part A
```{r}
# (a) Create the matrices
A <- matrix(c(1, -2, 0, 4, 3, -1), nrow=2, byrow=TRUE)
B <- matrix(c(0, -1, 6, 3, 0, 2, -3, 2, 1), nrow=3, byrow=TRUE)
C <- matrix(c(2, -2, 3, 1), nrow=2, byrow=TRUE)
D <- matrix(c(5, 0, -2), nrow=3, byrow=TRUE)

# Display matrices
print("Matrix A:")
print(A)
print("Matrix B:")
print(B)
print("Matrix C:")
print(C)
print("Matrix D:")
print(D)
```

### Part B
```{r}
print_matrix_dimensions <- function(matrix_name, matrix_obj) {
  dim_values <- dim(matrix_obj)
  cat("Dimensions of", matrix_name, ":", dim_values[1], "x", dim_values[2], "\n")
}

print_matrix_dimensions("A", A)
print_matrix_dimensions("B", B)
print_matrix_dimensions("C", C)
print_matrix_dimensions("D", D)

```

### Part C
```{r}
# Function to check if two matrices can be multiplied
can_multiply <- function(mat1, mat2, name1, name2) {
  if (ncol(mat1) == nrow(mat2)) {
    result <- mat1 %*% mat2
    cat("Matrix", name1, "*", name2, "is valid.\n")
    print(result)
    cat("Dimensions of", name1, "*", name2, ":", dim(result), "\n\n")
  } else {
    cat("Matrix", name1, "*", name2, "is NOT valid due to incompatible dimensions.\n\n")
  }
}

# Check all possible matrix multiplications
can_multiply(A, B, "A", "B")  # A (2x3) * B (3x3) = Valid (2x3)
can_multiply(B, A, "B", "A")  # B (3x3) * A (2x3) = Invalid
can_multiply(A, C, "A", "C")  # A (2x3) * C (2x2) = Invalid
can_multiply(C, A, "C", "A")  # C (2x2) * A (2x3) = Valid (2x3)
can_multiply(B, D, "B", "D")  # B (3x3) * D (3x1) = Valid (3x1)
can_multiply(D, B, "D", "B")  # D (3x1) * B (3x3) = Invalid
can_multiply(C, D, "C", "D")  # C (2x2) * D (3x1) = Invalid
can_multiply(D, C, "D", "C")  # D (3x1) * C (2x2) = Invalid

```

### Part D
```{r}
# Compute transposes
A_t <- t(A)  # A'
B_t <- t(B)  # B'
C_t <- t(C)  # C'
D_t <- t(D)  # D'

# Function to display matrix and its dimensions
print_matrix_info <- function(matrix_name, matrix_obj) {
  cat("\nTranspose of", matrix_name, ":\n")
  print(matrix_obj)
  cat("Dimensions of", matrix_name, "':", dim(matrix_obj)[1], "x", dim(matrix_obj)[2], "\n")
}

# Display transposes and their dimensions
print_matrix_info("A", A_t)
print_matrix_info("B", B_t)
print_matrix_info("C", C_t)
print_matrix_info("D", D_t)
```

### Part E
```{r}
# Function to check valid multiplication and display result
can_multiply <- function(mat1, mat2, name1, name2) {
  if (ncol(mat1) == nrow(mat2)) {
    result <- mat1 %*% mat2
    cat("\nMatrix", name1, "*", name2, "is valid.\n")
    print(result)
    cat("Dimensions of", name1, "*", name2, ":", dim(result)[1], "x", dim(result)[2], "\n")
  } else {
    cat("\nMatrix", name1, "*", name2, "is NOT valid due to incompatible dimensions.\n")
  }
}

# Identify at least two valid multiplications involving transposed matrices
can_multiply(A_t, C, "A'", "C")  # A' (3x2) * C (2x2) = Valid (3x2)
can_multiply(B_t, D, "B'", "D")  # B' (3x3) * D (3x1) = Valid (3x1)
```

### Part F
```{r}
# Store in a named list
matrices <- list(A=A, B=B, C=C, D=D, A_t=A_t, B_t=B_t, C_t=C_t, D_t=D_t)

# Generate all pairs of matrices (unique)
matrix_pairs <- combn(names(matrices), 2, simplify = FALSE)

# Check valid additions
valid_additions <- lapply(matrix_pairs, function(pair) {
  if (all(dim(matrices[[pair[1]]]) == dim(matrices[[pair[2]]]))) {
    return(pair)
  } else {
    return(NULL)
  }
})

# Filter out invalid additions
valid_additions <- Filter(Negate(is.null), valid_additions)

# Results
if (length(valid_additions) > 0) {
  cat("The following matrix pairs can be added together:\n")
  for (pair in valid_additions) {
    cat(pair[1], "and", pair[2], "(Dimensions:", 
  dim(matrices[[pair[1]]])[1], "x", dim(matrices[[pair[1]]])[2], ")\n")
  }
} else {
  cat("No matrices can be added together as none share the same dimensions.\n")
}

# Explanation
cat("Only two pairs of the matrices in this example can be added together\n")
cat("because matrix addition requires that both matrices\n")
cat("have the same dimensions.\n")

```
