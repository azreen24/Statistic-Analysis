"0","# Function to check valid multiplication and display result"
"0","can_multiply <- function(mat1, mat2, name1, name2) {"
"0","  if (ncol(mat1) == nrow(mat2)) {"
"0","    result <- mat1 %*% mat2"
"0","    cat(""\nMatrix"", name1, ""*"", name2, ""is valid.\n"")"
"0","    print(result)"
"0","    cat(""Dimensions of"", name1, ""*"", name2, "":"", dim(result)[1], ""x"", dim(result)[2], ""\n"")"
"0","  } else {"
"0","    cat(""\nMatrix"", name1, ""*"", name2, ""is NOT valid due to incompatible dimensions.\n"")"
"0","  }"
"0","}"
"0",""
"0","# Identify at least two valid multiplications involving transposed matrices"
"0","can_multiply(A_t, C, ""A'"", ""C"")  # A' (3x2) * C (2x2) = Valid (3x2)"
"1","
Matrix"
"1"," "
"1","A'"
"1"," "
"1","*"
"1"," "
"1","C"
"1"," "
"1","is valid.
"
"1","    "
"1"," [,1]"
"1"," [,2]"
"1","
[1,]"
"1","   14"
"1","    2"
"1","
[2,]"
"1","    5"
"1","    7"
"1","
[3,]"
"1","   -3"
"1","   -1"
"1","
"
"1","Dimensions of"
"1"," "
"1","A'"
"1"," "
"1","*"
"1"," "
"1","C"
"1"," "
"1",":"
"1"," "
"1","3"
"1"," "
"1","x"
"1"," "
"1","2"
"1"," "
"1","
"
"0","can_multiply(B_t, D, ""B'"", ""D"")  # B' (3x3) * D (3x1) = Valid (3x1)"
"1","
Matrix"
"1"," "
"1","B'"
"1"," "
"1","*"
"1"," "
"1","D"
"1"," "
"1","is valid.
"
"1","    "
"1"," [,1]"
"1","
[1,]"
"1","    6"
"1","
[2,]"
"1","   -9"
"1","
[3,]"
"1","   28"
"1","
"
"1","Dimensions of"
"1"," "
"1","B'"
"1"," "
"1","*"
"1"," "
"1","D"
"1"," "
"1",":"
"1"," "
"1","3"
"1"," "
"1","x"
"1"," "
"1","1"
"1"," "
"1","
"
