} else {
cat("Conclusion: Fail to reject H0. No significant relationship.\n")
}
anova_results <- anova(model)
print(anova_results)
# State the hypotheses
cat("Hypothesis Test for F-statistic:\n")
cat("H0: β1 = 0 (AvgAge does NOT affect Wins)\n")
cat("HA: β1 ≠ 0 (AvgAge DOES affect Wins)\n\n")
f_stat <- anova_results$`F value`[1]
p_value <- anova_results$`Pr(>F)`[1]
cat("F-statistic:", round(f_stat, 3), "\n")
cat("p-value:", round(p_value, 5), "\n")
alpha <- 0.05
if (p_value < alpha) {
cat("Conclusion: Reject H0. AvgAge significantly predicts Wins.\n")
} else {
cat("Conclusion: Fail to reject H0. No significant relationship.\n")
}
# Compute residuals
residuals <- resid(model)
# Create the residual plot
plot(data$AvgAge, residuals,
main = "Residual Plot: Wins vs. Player Age",
xlab = "Average Player Age",
ylab = "Residuals (e_i)",
pch = 19, col = "green")
# Add a horizontal line at y = 0
abline(h = 0, col = "red", lwd = 2)
# Compute MSE (Mean Squared Error)
mse <- sum(residuals^2) / df.residual(model)
# Compute standardized residuals
std_residuals <- residuals / sqrt(mse)
# Plot standardized residuals vs. AvgAge
plot(data$AvgAge, std_residuals,
main = "Standardized Residual Plot: Wins vs. Player Age",
xlab = "Average Player Age",
ylab = "Standardized Residuals (e*_i)",
pch = 19, col = "blue")
# Add horizontal reference line at y = 0
abline(h = 0, col = "red", lwd = 2)
# Add dotted horizontal lines at e*_i = ±3
abline(h = 3, col = "black", lty = 2)
abline(h = -3, col = "black", lty = 2)
# Compute MSE (Mean Squared Error)
mse <- sum(residuals^2) / df.residual(model)
# Compute standardized residuals
std_residuals <- residuals / sqrt(mse)
# Plot standardized residuals vs. AvgAge
plot(data$AvgAge, std_residuals,
main = "Standardized Residual Plot: Wins vs. Player Age",
xlab = "Average Player Age",
ylab = "Standardized Residuals (e*_i)",
pch = 19, col = "green")
# Add horizontal reference line at y = 0
abline(h = 0, col = "red", lwd = 2)
# Add dotted horizontal lines at e*_i = ±3
abline(h = 3, col = "black", lty = 2)
abline(h = -3, col = "black", lty = 2)
# Violation 4: Model fits all but one outlying observation
# Violation 4: Model fits all but one outlying observation
Violation 4: Model fits all but one outlying observation
cat("Violation 4: Model fits all but one outlying observation\n")
# Identify non-outlier data points based on standardized residuals
data_clean <- data[abs(resid(model) / summary(model)$sigma) < 3, ]
# Refit the regression model without outliers
model_clean <- lm(Wins ~ AvgAge, data = data_clean)
# Plot Standardized Residuals
plot(data_clean$AvgAge, resid(model_clean) / summary(model_clean)$sigma,
main = "Standardized Residual Plot (After Outlier Removal)",
ylab = "Standardized Residual",
xlab = "Average Player Age",
pch = 19, col = "blue")
# Add reference lines
abline(a = 0, b = 0, lty = 2)  # Zero reference line
abline(a = -3, b = 0, lty = 3) # Lower bound (-3)
abline(a = 3, b = 0, lty = 3)  # Upper bound (+3)
# Run ANOVA for both models
anova_original <- anova(model)
anova_clean <- anova(model_clean)
# Print F-statistics and p-values for comparison
cat("Before Removing Outliers:\n")
cat("F-statistic:", round(anova_original$`F value`[1], 3), "\n")
cat("p-value:", round(anova_original$`Pr(>F)`[1], 5), "\n")
cat("\nAfter Removing Outliers:\n")
cat("F-statistic:", round(anova_clean$`F value`[1], 3), "\n")
cat("p-value:", round(anova_clean$`Pr(>F)`[1], 5), "\n")
# Compare hypothesis test decision
if (round(anova_clean$`Pr(>F)`[1], 5) < 0.05) {
cat("Conclusion: Reject H0. AvgAge significantly predicts Wins.\n")
} else {
cat("Conclusion: Fail to reject H0. No significant relationship.\n")
}
# Identify non-outlier data points based on standardized residuals
data_clean <- data[abs(resid(model) / summary(model)$sigma) < 3, ]
# Refit the regression model without outliers
model_clean <- lm(Wins ~ AvgAge, data = data_clean)
# Plot Standardized Residuals
plot(data_clean$AvgAge, resid(model_clean) / summary(model_clean)$sigma,
main = "Standardized Residual Plot (After Outlier Removal)",
ylab = "Standardized Residual",
xlab = "Average Player Age",
pch = 19, col = "green")
# Add reference lines
abline(a = 0, b = 0, lty = 2)  # Zero reference line
abline(a = -3, b = 0, lty = 3) # Lower bound (-3)
abline(a = 3, b = 0, lty = 3)  # Upper bound (+3)
# Run ANOVA for both models
anova_original <- anova(model)
anova_clean <- anova(model_clean)
# Print F-statistics and p-values for comparison
cat("Before Removing Outliers:\n")
cat("F-statistic:", round(anova_original$`F value`[1], 3), "\n")
cat("p-value:", round(anova_original$`Pr(>F)`[1], 5), "\n")
cat("\nAfter Removing Outliers:\n")
cat("F-statistic:", round(anova_clean$`F value`[1], 3), "\n")
cat("p-value:", round(anova_clean$`Pr(>F)`[1], 5), "\n")
# Compare hypothesis test decision
if (round(anova_clean$`Pr(>F)`[1], 5) < 0.05) {
cat("Conclusion: Reject H0. AvgAge significantly predicts Wins.\n")
} else {
cat("Conclusion: Fail to reject H0. No significant relationship.\n")
}
# Identify non-outlier data points based on standardized residuals
data_clean <- data[abs(resid(model) / summary(model)$sigma) < 3, ]
# Refit the regression model without outliers
model_clean <- lm(Wins ~ AvgAge, data = data_clean)
# Plot Standardized Residuals
plot(data_clean$AvgAge, resid(model_clean) / summary(model_clean)$sigma,
main = "Standardized Residual Plot (After Outlier Removal)",
ylab = "Standardized Residual",
xlab = "Average Player Age",
pch = 19, col = "green")
# Add reference lines
abline(a = 0, b = 0, lty = 2)  # Zero reference line
abline(a = -3, b = 0, lty = 3) # Lower bound (-3)
abline(a = 3, b = 0, lty = 3)  # Upper bound (+3)
# Run ANOVA for both models
anova_original <- anova(model)
anova_clean <- anova(model_clean)
# Print F-statistics and p-values for comparison
cat("Before Removing Outliers:\n")
cat("F-statistic:", round(anova_original$`F value`[1], 3), "\n")
cat("p-value:", round(anova_original$`Pr(>F)`[1], 5), "\n")
cat("\nAfter Removing Outliers:\n")
cat("F-statistic:", round(anova_clean$`F value`[1], 3), "\n")
cat("p-value:", round(anova_clean$`Pr(>F)`[1], 5), "\n")
# Compare hypothesis test decision
if (round(anova_clean$`Pr(>F)`[1], 5) < 0.05) {
cat("Conclusion: Reject H0. AvgAge significantly predicts Wins.\n")
} else {
cat("Conclusion: Fail to reject H0. No significant relationship.\n")
}
cat("The violation was resolved.\n")
# Identify non-outlier data points based on standardized residuals
data_clean <- data[abs(resid(model) / summary(model)$sigma) < 3, ]
# Refit the regression model without outliers
model_clean <- lm(Wins ~ AvgAge, data = data_clean)
# Plot Standardized Residuals
plot(data_clean$AvgAge, resid(model_clean) / summary(model_clean)$sigma,
main = "Standardized Residual Plot (After Outlier Removal)",
ylab = "Standardized Residual",
xlab = "Average Player Age",
pch = 19, col = "green")
# Add reference lines
abline(a = 0, b = 0, lty = 2)  # Zero reference line
abline(a = -3, b = 0, lty = 3) # Lower bound (-3)
abline(a = 3, b = 0, lty = 3)  # Upper bound (+3)
# Run ANOVA for both models
anova_original <- anova(model)
anova_clean <- anova(model_clean)
# Print F-statistics and p-values for comparison
cat("Before Removing Outliers:\n")
cat("F-statistic:", round(anova_original$`F value`[1], 3), "\n")
cat("p-value:", round(anova_original$`Pr(>F)`[1], 5), "\n")
cat("\nAfter Removing Outliers:\n")
cat("F-statistic:", round(anova_clean$`F value`[1], 3), "\n")
cat("p-value:", round(anova_clean$`Pr(>F)`[1], 5), "\n")
# Compare hypothesis test decision
if (round(anova_clean$`Pr(>F)`[1], 5) < 0.05) {
cat("Conclusion: Reject H0. AvgAge significantly predicts Wins.\n")
} else {
cat("Conclusion: Fail to reject H0. No significant relationship.\n")
}
cat("The violation was resolved leading to a corrected conclusion.\n")
data <- read.csv("hw03pr02.csv", header = TRUE, sep = ",")
data <- read.csv("hw03pr02.csv", header = TRUE, sep = ",")
colnames(data)
data <- read.csv("hw03pr02.csv", header = TRUE, sep = ",")
colnames(data)
model <- lm(Deflection ~ Area, data = data)
summary(model)
data <- read.csv("hw03pr02.csv", header = TRUE, sep = ",")
colnames(data)
model <- lm(Deflection ~ Area, data = data)
summary(model)
cat("The fitted regression equation is:\n")
cat("Deflection(Y) =", round(intercept, 2), "+", round(slope, 2), "* Area(X)\n")
data <- read.csv("hw03pr02.csv", header = TRUE, sep = ",")
colnames(data)
model <- lm(Deflection ~ Area, data = data)
summary(model)
intercept <- coef(model)[1]
slope <- coef(model)[2]
cat("The fitted regression equation is:\n")
cat("Deflection(Y) =", round(intercept, 2), "+", round(slope, 2), "* Area(X)\n")
# Compute residuals
residuals <- resid(model)
# Create residual plot
plot(data$Area, residuals,
main = "Residual Plot: Deflection vs. Area",
xlab = "Area",
ylab = "Residuals",
pch = 19, col = "blue")
# Add a horizontal line at y = 0
abline(h = 0, col = "red", lwd = 2)
cat("Violation 1: The regression function is not linear.")
# Load necessary library
library(MASS)
# Fit the initial model
model <- lm(Deflection ~ Area, data = data)
# Perform the Box-Cox transformation
boxcox_result <- boxcox(model, lambda = seq(-2, 2, by = 0.1))
# Identify the best lambda value
best_lambda <- boxcox_result$x[which.max(boxcox_result$y)]
cat("Optimal Lambda:", best_lambda, "\n")
# Choose the closest transformation based on the notes
if (best_lambda == 0) {
data$Transformed_Area <- log(data$Area)  # Log transformation
transformation_used <- "Log transformation of Area"
} else if (abs(best_lambda - 0.5) < 0.1) {
data$Transformed_Area <- sqrt(data$Area)  # Square root transformation
transformation_used <- "Square root transformation of Area"
} else if (abs(best_lambda - (-1)) < 0.1) {
data$Transformed_Area <- 1 / data$Area  # Reciprocal transformation
transformation_used <- "Reciprocal transformation of Area"
} else {
transformation_used <- "No common transformation found"
}
cat("Chosen Transformation:", transformation_used, "\n")
# Refit the model with the transformed predictor
model_transformed <- lm(Deflection ~ Transformed_Area, data = data)
# Load the necessary package
library(MASS)
# Adjust Y (Deflection) to be positive
data$Deflection_shifted <- data$Deflection - min(data$Deflection) + 0.01
# Fit the model with the shifted response variable
model_shifted <- lm(Deflection_shifted ~ Area, data = data)
# Perform the Box-Cox transformation
boxcox_result <- boxcox(model_shifted, lambda = seq(-2, 2, by = 0.1))
# Identify the best lambda value
best_lambda <- boxcox_result$x[which.max(boxcox_result$y)]
cat("Optimal Lambda:", best_lambda, "\n")
# Apply the appropriate transformation based on lambda
if (best_lambda > -0.6 & best_lambda < -0.3) {
data$Transformed_Area <- 1 / sqrt(data$Area)  # Reciprocal square root transformation
transformation_used <- "Reciprocal square root transformation of Area"
} else if (best_lambda > -0.1 & best_lambda < 0.1) {
data$Transformed_Area <- log(data$Area)  # Log transformation
transformation_used <- "Log transformation of Area"
} else if (best_lambda > 0.4 & best_lambda < 0.6) {
data$Transformed_Area <- sqrt(data$Area)  # Square root transformation
transformation_used <- "Square root transformation of Area"
} else {
data$Transformed_Area <- data$Area  # No transformation applied
transformation_used <- "No transformation applied"
}
cat("Chosen Transformation:", transformation_used, "\n")
# Refit the model with the transformed predictor and adjusted response
model_transformed <- lm(Deflection_shifted ~ Transformed_Area, data = data)
summary(model_transformed)
# Load the necessary library
library(MASS)
# Ensure Y is positive for Box-Cox transformation
Y_transformed <- data$Deflection - min(data$Deflection) + 0.01
# Apply Box-Cox transformation
bc <- boxcox(lm(Y_transformed ~ data$Area), lambda = seq(-2, 2, by = 0.1))
# Find the optimal lambda
lambda_opt <- bc$x[which.max(bc$y)]
lambda_opt
# Choose the closest transformation from the notes
if (lambda_opt >= 0.5) {
data$Transformed_Deflection <- sqrt(data$Deflection)  # Square root transformation
} else if (lambda_opt >= 0) {
data$Transformed_Deflection <- log(data$Deflection)   # Log transformation
} else if (lambda_opt >= -0.5) {
data$Transformed_Deflection <- 1 / sqrt(data$Deflection)  # Reciprocal square root
} else {
data$Transformed_Deflection <- 1 / data$Deflection  # Reciprocal transformation
}
# Print the selected transformation
cat("Chosen transformation: ", ifelse(lambda_opt >= 0.5, "Square root",
ifelse(lambda_opt >= 0, "Log",
ifelse(lambda_opt >= -0.5, "Reciprocal square root",
"Reciprocal"))), "\n")
# Fit the linear model with transformed Y
model_transformed <- lm(Transformed_Deflection ~ data$Area, data = data)
summary(model_transformed)
# Create the residual plot for transformed Y
plot(data$Area, resid(model_transformed),
main = "Residual Plot: Transformed Deflection vs. Area",
xlab = "Area", ylab = "Residuals",
col = "blue", pch = 19)
abline(h = 0, col = "red", lwd = 2)
# Check if the violation identified in part (c) is resolved
cat("Check residual plot: If the spread is more random, transformation was effective.\n")
# Load required package
library(MASS)
# Transform the response variable using 1/sqrt(Y)
data$Transformed_Deflection <- 1 / sqrt(data$Deflection)
# Fit new linear model with transformed Y
model_trans <- lm(Transformed_Deflection ~ Area, data = data)
summary(model_trans)
# Create new residual plot
plot(data$Area, resid(model_trans),
main = "Residual Plot: Transformed Deflection vs. Area",
xlab = "Area",
ylab = "Residuals",
pch = 19, col = "blue")
abline(h = 0, col = "red")
# Compute residuals
residuals <- resid(model)
# Create residual plot
plot(data$Area, residuals,
main = "Residual Plot: Deflection vs. Area",
xlab = "Area",
ylab = "Residuals",
pch = 19, col = "blue")
# Add a horizontal line at y = 0
abline(h = 0, col = "red", lwd = 2)
# Load required package
library(MASS)
# Transform the response variable using 1/sqrt(Y)
data$Transformed_Deflection <- 1 / sqrt(data$Deflection)
# Fit new linear model with transformed Y
model_trans <- lm(Transformed_Deflection ~ Area, data = data)
summary(model_trans)
# Create new residual plot
plot(data$Area, resid(model_trans),
main = "Residual Plot: Transformed Deflection vs. Area",
xlab = "Area",
ylab = "Residuals",
pch = 19, col = "blue")
abline(h = 0, col = "red")
# Load necessary library
library(MASS)
# Fit the linear model
model <- lm(Deflection ~ Area, data = data)
# Perform Box-Cox transformation
boxcox_result <- boxcox(model, lambda = seq(-2, 2, by = 0.1))
# Identify the optimal lambda value
optimal_lambda <- boxcox_result$x[which.max(boxcox_result$y)]
cat("Optimal Lambda:", optimal_lambda, "\n")
# Choose the closest common transformation based on notes
if (optimal_lambda < -0.75) {
transformed_Y <- 1 / data$Deflection
transformation <- "Reciprocal (1/Y)"
} else if (optimal_lambda >= -0.75 & optimal_lambda < -0.25) {
transformed_Y <- 1 / sqrt(data$Deflection)
transformation <- "Reciprocal Square Root (1/sqrt(Y))"
} else if (optimal_lambda >= -0.25 & optimal_lambda < 0.25) {
transformed_Y <- log(data$Deflection)
transformation <- "Log Transformation (log(Y))"
} else if (optimal_lambda >= 0.25 & optimal_lambda < 0.75) {
transformed_Y <- sqrt(data$Deflection)
transformation <- "Square Root (sqrt(Y))"
} else {
transformed_Y <- data$Deflection^2
transformation <- "Square (Y^2)"
}
# Output the chosen transformation
cat("Chosen Transformation:", transformation, "\n")
# Fit the linear model with transformed Y
model_transformed <- lm(Transformed_Deflection ~ data$Area, data = data)
summary(model_transformed)
# Create the residual plot for transformed Y
plot(data$Area, resid(model_transformed),
main = "Residual Plot: Transformed Deflection vs. Area",
xlab = "Area", ylab = "Residuals",
col = "blue", pch = 19)
abline(h = 0, col = "red", lwd = 2)
# Check if the violation identified in part (c) is resolved
cat("Check residual plot: If the spread is more random, transformation was effective.\n")
# Load necessary library
library(MASS)
# Fit the initial linear model
model <- lm(Deflection ~ Area, data = data)
# Apply Box-Cox transformation to find optimal lambda
boxcox_result <- boxcox(model, lambda = seq(-2, 2, by = 0.1))  # Generates Box-Cox plot
# Find the optimal lambda (maximizing log-likelihood)
lambda_opt <- boxcox_result$x[which.max(boxcox_result$y)]
cat("Optimal Lambda:", lambda_opt, "\n")
# Select the closest transformation from the notes
if (lambda_opt >= 1.9 & lambda_opt <= 2.1) {
data$Deflection_Transformed <- data$Deflection^2  # Y^2
cat("Chosen Transformation: Y^2\n")
} else if (lambda_opt >= 0.4 & lambda_opt <= 0.6) {
data$Deflection_Transformed <- sqrt(data$Deflection)  # sqrt(Y)
cat("Chosen Transformation: sqrt(Y)\n")
} else if (lambda_opt >= -0.1 & lambda_opt <= 0.1) {
data$Deflection_Transformed <- log(data$Deflection + abs(min(data$Deflection)) + 0.01)  # log(Y)
cat("Chosen Transformation: log(Y)\n")
} else if (lambda_opt >= -0.6 & lambda_opt <= -0.4) {
data$Deflection_Transformed <- 1 / sqrt(data$Deflection)  # 1/sqrt(Y)
cat("Chosen Transformation: 1/sqrt(Y)\n")
} else if (lambda_opt >= -1.1 & lambda_opt <= -0.9) {
data$Deflection_Transformed <- 1 / data$Deflection  # 1/Y
cat("Chosen Transformation: 1/Y\n")
} else {
cat("Chosen Transformation: No common transformation found\n")
}
# Fit the new model with the transformed Y (if applicable)
if (exists("data$Deflection_Transformed")) {
model_transformed <- lm(Deflection_Transformed ~ Area, data = data)
summary(model_transformed)
}
# Fit the linear model with transformed Y
model_transformed <- lm(Transformed_Deflection ~ data$Area, data = data)
summary(model_transformed)
# Create the residual plot for transformed Y
plot(data$Area, resid(model_transformed),
main = "Residual Plot: Transformed Deflection vs. Area",
xlab = "Area", ylab = "Residuals",
col = "blue", pch = 19)
abline(h = 0, col = "red", lwd = 2)
# Check if the violation identified in part (c) is resolved
cat("Check residual plot: If the spread is more random, transformation was effective.\n")
data <- read.csv("hw03pr03.csv", header = TRUE, sep = ",")
colnames(data)
data <- read.csv("hw03pr03.csv", header = TRUE, sep = ",")
colnames(data)
# Q-Q Plot for Y
qqnorm(data$Y, main = "Q-Q Plot for Outcome Y")
data <- read.csv("hw03pr03.csv", header = TRUE, sep = ",")
colnames(data)
library(ggplot2)
data <- read.csv("hw03pr03.csv", header = TRUE, sep = ",")
colnames(data)
qqnorm(data$Y, main = "Q-Q Plot of Outcome Y")
# Load necessary library
library(ggplot2)
# Load the dataset
data <- read.csv("hw03pr03.csv", header = TRUE, sep = ",")
colnames(data)
# Generate a Q-Q plot for the outcome variable (ensure correct column name)
qqnorm(data$y, main = "Q-Q Plot of Outcome Y")
qqline(data$y, col = "red", lwd = 2)  # Adds a reference line
# Load necessary library
library(ggplot2)
# Load the dataset
data <- read.csv("hw03pr03.csv", header = TRUE, sep = ",")
colnames(data)
# Generate a Q-Q plot for the outcome variable (ensure correct column name)
qqnorm(data$y, main = "Q-Q Plot of Outcome Y")
qqline(data$y, col = "red", lwd = 2)  # Adds a reference line
# observations
cat("Observations:\n",
"- The Q-Q plot is used to assess whether the residuals follow a normal distribution.\n",
"- If the points lie along the straight red line, the residuals are normally distributed.\n",
"- In this case, the points deviate significantly from the line, especially at the tails, indicating a violation of normality.\n",
"- This suggests that a transformation might be necessary to make the residuals more normal.\n")
# Load necessary library
library(MASS)
# Fit the linear model
model <- lm(Y ~ X, data = data)
# Load necessary library
library(MASS)
# Fit the linear model
# Fit the linear model
model <- lm(y ~ x, data = data)
# Perform the Box-Cox transformation
library(MASS)
boxcox_result <- boxcox(model, lambda = seq(-2, 2, by = 0.1))
# Find the optimal lambda
lambda_optimal <- boxcox_result$x[which.max(boxcox_result$y)]
# Print the transformation applied
cat("The optimal lambda (λ) found is:", lambda_optimal, "\n")
# Apply the transformation based on the closest lambda value
if (lambda_optimal > 1.5) {
data$y_transformed <- data$y^2
cat("Transformation applied: Y' = Y^2\n")
} else if (lambda_optimal > 0.25) {
data$y_transformed <- sqrt(data$y)
cat("Transformation applied: Y' = sqrt(Y)\n")
} else if (lambda_optimal > -0.25) {
data$y_transformed <- log(data$y)
cat("Transformation applied: Y' = log(Y)\n")
} else if (lambda_optimal > -0.75) {
data$y_transformed <- 1 / sqrt(data$y)
cat("Transformation applied: Y' = 1 / sqrt(Y)\n")
} else {
data$y_transformed <- 1 / data$y
cat("Transformation applied: Y' = 1 / Y\n")
}
# Apply the transformation to Y
data$Y_transformed <- log(data$y)
# Generate Q-Q plot for transformed Y
qqnorm(data$Y_transformed, main = "Q-Q Plot of Transformed Outcome Y")
qqline(data$Y_transformed, col = "red", lwd = 2)
# Print observation
cat("The Q-Q plot for the transformed outcome Y appears to follow the normality assumption better.
However, there may still be some slight deviations at the tails, indicating that normality is not fully satisfied.")
# Apply the transformation to Y
data$Y_transformed <- log(data$y)
# Generate Q-Q plot for transformed Y
qqnorm(data$Y_transformed, main = "Q-Q Plot of Transformed Outcome Y")
qqline(data$Y_transformed, col = "red", lwd = 2)
# Print observation
cat("The Q-Q plot for the transformed outcome Y now aligns more closely with the normality assumption.
The data points are much closer to the diagonal reference line compared to the original Q-Q plot,
suggesting that the transformation helped correct the non-normality issue.
There may still be minor deviations in the tails, but overall, normality is significantly improved.")
